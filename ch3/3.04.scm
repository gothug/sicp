(load "../lib/util.scm")

; Solution
(define (make-account balance secret)
  (let ((incorrect-attempts 0))
    (define (withdraw amount)
        (if (>= balance amount)
            (begin (set! balance (- balance amount))
                balance)
            "Insufficient funds"))
    (define (deposit amount)
        (set! balance (+ balance amount))
        balance)
    (define (wrong-password x)
      (display "Incorrect password")
      (newline))
    (define (call-the-cops x)
      (display "Calling the cops..")
      (newline))
    (define (dispatch entered-secret m)
        (if (eq? secret entered-secret)
            (begin (set! incorrect-attempts 0)
                   (cond ((eq? m 'withdraw) withdraw)
                         ((eq? m 'deposit) deposit)
                         (else (error "Unknown request -- MAKE-ACCOUNT" m))))
            (begin (set! incorrect-attempts (+ incorrect-attempts 1))
                   (if (< incorrect-attempts 8)
                       wrong-password
                       call-the-cops))))
    dispatch))

; Tests
(run-tests-header)

(test "make-account")

(define acc (make-account 100 'secret-password))

((acc 'some-other-password 'deposit) 1000)
((acc 'some-other-password 'deposit) 1000)
((acc 'some-other-password 'deposit) 1000)
((acc 'secret-password 'withdraw) 40)
((acc 'some-other-password 'deposit) 1000)
((acc 'some-other-password 'deposit) 1000)
((acc 'some-other-password 'deposit) 1000)
((acc 'some-other-password 'deposit) 1000)
((acc 'some-other-password 'deposit) 1000)
((acc 'some-other-password 'deposit) 1000)
((acc 'some-other-password 'deposit) 1000)
((acc 'some-other-password 'deposit) 1000)
