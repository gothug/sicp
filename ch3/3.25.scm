(load "../lib/util.scm")

; Solution
(define (make-table same-key?)
  (let ((local-table (list '*table*)))
    (define (assoc key records)
      (cond ((null? records) false)
            ((same-key? key (caar records)) (car records))
            (else (assoc key (cdr records)))))
    (define (lookup key-list)
      (define (lookup-helper keys table)
        (let ((key (car keys))
              (rest-keys (cdr keys)))
          (let ((key-entry (assoc key (cdr table))))
            (if key-entry
              (if (null? rest-keys)
                  (cdr key-entry)
                  (lookup-helper rest-keys key-entry))
              false))))
      (lookup-helper key-list local-table))
    (define (insert! key-list value)
      (define (insert-helper keys value table)
        (let ((key (car keys))
              (rest-keys (cdr keys)))
          (let ((key-entry (assoc key (cdr table))))
            (if key-entry
                (if (null? rest-keys)
                    (set-cdr! key-entry value)
                    (insert-helper rest-keys value key-entry))
                (if (null? rest-keys)
                    (set-cdr! table
                              (cons
                               (cons key value)
                               (cdr table)))
                    (let ((new-subtable (cons key '())))
                      (set-cdr! table
                                (cons new-subtable (cdr table)))
                      (insert-helper rest-keys value new-subtable)))))))
      (insert-helper key-list value local-table)
      'ok)
    (define (dispatch m)
      (cond ((eq? m 'lookup-proc) lookup)
            ((eq? m 'insert-proc!) insert!)
            (else (error "Unknown operation -- TABLE" m))))
    dispatch))

(define same-key? equal?)
(define operation-table (make-table same-key?))
(define get (operation-table 'lookup-proc))
(define put (operation-table 'insert-proc!))

; Tests
(run-tests-header)
(put '(pi) 314)
(put '(math +) 43)
(put '(math -) 45)
(put '(letters lowercase a) 32)
(put '(letters lowercase b) 33)
(put '(letters uppercase B) 105)

(should-be (get '(pi)) 314)
(should-be (get '(math +)) 43)
(should-be (get '(math -)) 45)
(should-be (get '(letters lowercase a)) 32)
(should-be (get '(letters lowercase b)) 33)
(should-be (get '(letters uppercase B)) 105)
